//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/MovementScript/PlayerMovment.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerMovment : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerMovment()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerMovment"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""43d6ea20-8b58-4351-ac62-6ac5cac38cc4"",
            ""actions"": [
                {
                    ""name"": ""Movment"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a9daaf15-64d3-4a8e-90d1-de01e7d789d8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""861942d9-8020-4663-8342-7ccfe29a0ce3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""8e0d5de6-84ae-41f7-aaf6-0ef4e191d84c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movment"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0b13fa12-3202-469b-96f3-4eeea8a2c8c6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4af3c6be-b7e4-49d5-ad84-89e2e0119304"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3463d664-37bc-4333-9246-48f0b9f3a8c5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""371c7fff-40c6-41bc-8b23-7e0b772a7288"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2049510f-d25e-40e8-b758-2c7a2467262f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""cc9055a9-d367-40d9-abc8-faac764d4356"",
            ""actions"": [
                {
                    ""name"": ""OpenMenu"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c0596b5a-763a-4c89-b44b-b1ad2cb8fc74"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""a1ff8e12-4f9e-4eee-b8f0-531c47d78901"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectOption"",
                    ""type"": ""Button"",
                    ""id"": ""c9e1bee2-161c-480c-b757-57b237cad7fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChoiceOption"",
                    ""type"": ""PassThrough"",
                    ""id"": ""008f3184-d340-4b74-a2e1-f77fdd48cc78"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5f6fef3b-c704-474e-ac28-9eff280b09a7"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a2cdb54-2f3e-41f2-9440-5cc420839a0a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83362ad5-288b-4d8a-826d-d18c7b69f5c5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c92e427-c33e-4e32-9a13-8c85b04ea1aa"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectOption"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c35e1339-c2b7-4db0-ad0e-c0159197eac1"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChoiceOption"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Main
        m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
        m_Main_Movment = m_Main.FindAction("Movment", throwIfNotFound: true);
        m_Main_Interact = m_Main.FindAction("Interact", throwIfNotFound: true);
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_OpenMenu = m_Menu.FindAction("OpenMenu", throwIfNotFound: true);
        m_Menu_Movement = m_Menu.FindAction("Movement", throwIfNotFound: true);
        m_Menu_SelectOption = m_Menu.FindAction("SelectOption", throwIfNotFound: true);
        m_Menu_ChoiceOption = m_Menu.FindAction("ChoiceOption", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main
    private readonly InputActionMap m_Main;
    private IMainActions m_MainActionsCallbackInterface;
    private readonly InputAction m_Main_Movment;
    private readonly InputAction m_Main_Interact;
    public struct MainActions
    {
        private @PlayerMovment m_Wrapper;
        public MainActions(@PlayerMovment wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movment => m_Wrapper.m_Main_Movment;
        public InputAction @Interact => m_Wrapper.m_Main_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void SetCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterface != null)
            {
                @Movment.started -= m_Wrapper.m_MainActionsCallbackInterface.OnMovment;
                @Movment.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnMovment;
                @Movment.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnMovment;
                @Interact.started -= m_Wrapper.m_MainActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_MainActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movment.started += instance.OnMovment;
                @Movment.performed += instance.OnMovment;
                @Movment.canceled += instance.OnMovment;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public MainActions @Main => new MainActions(this);

    // Menu
    private readonly InputActionMap m_Menu;
    private IMenuActions m_MenuActionsCallbackInterface;
    private readonly InputAction m_Menu_OpenMenu;
    private readonly InputAction m_Menu_Movement;
    private readonly InputAction m_Menu_SelectOption;
    private readonly InputAction m_Menu_ChoiceOption;
    public struct MenuActions
    {
        private @PlayerMovment m_Wrapper;
        public MenuActions(@PlayerMovment wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenMenu => m_Wrapper.m_Menu_OpenMenu;
        public InputAction @Movement => m_Wrapper.m_Menu_Movement;
        public InputAction @SelectOption => m_Wrapper.m_Menu_SelectOption;
        public InputAction @ChoiceOption => m_Wrapper.m_Menu_ChoiceOption;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void SetCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterface != null)
            {
                @OpenMenu.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnOpenMenu;
                @OpenMenu.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnOpenMenu;
                @OpenMenu.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnOpenMenu;
                @Movement.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnMovement;
                @SelectOption.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnSelectOption;
                @SelectOption.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnSelectOption;
                @SelectOption.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnSelectOption;
                @ChoiceOption.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnChoiceOption;
                @ChoiceOption.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnChoiceOption;
                @ChoiceOption.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnChoiceOption;
            }
            m_Wrapper.m_MenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @OpenMenu.started += instance.OnOpenMenu;
                @OpenMenu.performed += instance.OnOpenMenu;
                @OpenMenu.canceled += instance.OnOpenMenu;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @SelectOption.started += instance.OnSelectOption;
                @SelectOption.performed += instance.OnSelectOption;
                @SelectOption.canceled += instance.OnSelectOption;
                @ChoiceOption.started += instance.OnChoiceOption;
                @ChoiceOption.performed += instance.OnChoiceOption;
                @ChoiceOption.canceled += instance.OnChoiceOption;
            }
        }
    }
    public MenuActions @Menu => new MenuActions(this);
    public interface IMainActions
    {
        void OnMovment(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IMenuActions
    {
        void OnOpenMenu(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnSelectOption(InputAction.CallbackContext context);
        void OnChoiceOption(InputAction.CallbackContext context);
    }
}
